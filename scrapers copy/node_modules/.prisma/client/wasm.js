
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  label: 'label',
  firstName: 'firstName',
  lastName: 'lastName',
  address1: 'address1',
  address2: 'address2',
  city: 'city',
  state: 'state',
  zip: 'zip',
  country: 'country',
  latitude: 'latitude',
  longitude: 'longitude',
  phone: 'phone',
  isDefault: 'isDefault'
};

exports.Prisma.UserPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  deliveryRadius: 'deliveryRadius',
  priceWeight: 'priceWeight',
  distanceWeight: 'distanceWeight',
  ratingWeight: 'ratingWeight',
  preferDelivery: 'preferDelivery',
  preferPickup: 'preferPickup'
};

exports.Prisma.StoreScalarFieldEnum = {
  id: 'id',
  name: 'name',
  website: 'website',
  storeType: 'storeType',
  address: 'address',
  city: 'city',
  state: 'state',
  zip: 'zip',
  latitude: 'latitude',
  longitude: 'longitude',
  phone: 'phone',
  rating: 'rating',
  deliveryFee: 'deliveryFee',
  minDelivery: 'minDelivery',
  maxDelivery: 'maxDelivery',
  deliveryRadius: 'deliveryRadius',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScrapingInfoScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  baseUrl: 'baseUrl',
  productSelectors: 'productSelectors',
  priceSelectors: 'priceSelectors',
  titleSelectors: 'titleSelectors',
  imageSelectors: 'imageSelectors',
  cartSelectors: 'cartSelectors',
  lastScrapedAt: 'lastScrapedAt',
  scrapingFrequency: 'scrapingFrequency',
  isActive: 'isActive'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  title: 'title',
  description: 'description',
  price: 'price',
  originalPrice: 'originalPrice',
  image: 'image',
  url: 'url',
  category: 'category',
  subcategory: 'subcategory',
  brand: 'brand',
  size: 'size',
  abv: 'abv',
  strain: 'strain',
  prescription: 'prescription',
  inStock: 'inStock',
  relevanceScore: 'relevanceScore',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  storeId: 'storeId',
  addressId: 'addressId',
  orderNumber: 'orderNumber',
  status: 'status',
  userRequest: 'userRequest',
  totalAmount: 'totalAmount',
  deliveryFee: 'deliveryFee',
  checkoutUrl: 'checkoutUrl',
  deliveryDate: 'deliveryDate',
  cardMessage: 'cardMessage',
  deliveryType: 'deliveryType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  quantity: 'quantity',
  price: 'price',
  variant: 'variant'
};

exports.Prisma.SearchLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  query: 'query',
  resultsCount: 'resultsCount',
  responseTime: 'responseTime',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.StoreType = exports.$Enums.StoreType = {
  FLOWER_SHOP: 'FLOWER_SHOP',
  LIQUOR_STORE: 'LIQUOR_STORE',
  WINE_SHOP: 'WINE_SHOP',
  BEER_DISTRIBUTOR: 'BEER_DISTRIBUTOR',
  DISPENSARY: 'DISPENSARY',
  PHARMACY: 'PHARMACY',
  GROCERY_STORE: 'GROCERY_STORE',
  CONVENIENCE_STORE: 'CONVENIENCE_STORE',
  RESTAURANT: 'RESTAURANT',
  BAKERY: 'BAKERY',
  BUTCHER: 'BUTCHER',
  SEAFOOD_MARKET: 'SEAFOOD_MARKET',
  FARMERS_MARKET: 'FARMERS_MARKET',
  SPECIALTY_FOOD: 'SPECIALTY_FOOD',
  GIFT_SHOP: 'GIFT_SHOP',
  BOOKSTORE: 'BOOKSTORE',
  ELECTRONICS: 'ELECTRONICS',
  HARDWARE_STORE: 'HARDWARE_STORE',
  PET_STORE: 'PET_STORE',
  GENERAL: 'GENERAL'
};

exports.Category = exports.$Enums.Category = {
  FLOWERS: 'FLOWERS',
  PLANTS: 'PLANTS',
  GARDEN_SUPPLIES: 'GARDEN_SUPPLIES',
  BEER: 'BEER',
  WINE: 'WINE',
  SPIRITS: 'SPIRITS',
  COCKTAIL_MIXERS: 'COCKTAIL_MIXERS',
  NON_ALCOHOLIC_BEVERAGES: 'NON_ALCOHOLIC_BEVERAGES',
  CANNABIS_FLOWER: 'CANNABIS_FLOWER',
  CANNABIS_EDIBLES: 'CANNABIS_EDIBLES',
  CANNABIS_CONCENTRATES: 'CANNABIS_CONCENTRATES',
  CBD_PRODUCTS: 'CBD_PRODUCTS',
  FRESH_PRODUCE: 'FRESH_PRODUCE',
  MEAT_SEAFOOD: 'MEAT_SEAFOOD',
  DAIRY_EGGS: 'DAIRY_EGGS',
  BAKERY: 'BAKERY',
  DELI: 'DELI',
  FROZEN_FOODS: 'FROZEN_FOODS',
  PANTRY_STAPLES: 'PANTRY_STAPLES',
  SNACKS: 'SNACKS',
  PREPARED_MEALS: 'PREPARED_MEALS',
  PRESCRIPTION_DRUGS: 'PRESCRIPTION_DRUGS',
  OTC_MEDICATIONS: 'OTC_MEDICATIONS',
  VITAMINS_SUPPLEMENTS: 'VITAMINS_SUPPLEMENTS',
  PERSONAL_CARE: 'PERSONAL_CARE',
  MEDICAL_SUPPLIES: 'MEDICAL_SUPPLIES',
  GIFT_BASKETS: 'GIFT_BASKETS',
  CHOCOLATES_CANDY: 'CHOCOLATES_CANDY',
  GREETING_CARDS: 'GREETING_CARDS',
  PARTY_SUPPLIES: 'PARTY_SUPPLIES',
  TOYS_GAMES: 'TOYS_GAMES',
  HOUSEHOLD_SUPPLIES: 'HOUSEHOLD_SUPPLIES',
  CLEANING_PRODUCTS: 'CLEANING_PRODUCTS',
  TOOLS_HARDWARE: 'TOOLS_HARDWARE',
  HOME_DECOR: 'HOME_DECOR',
  ELECTRONICS: 'ELECTRONICS',
  PHONE_ACCESSORIES: 'PHONE_ACCESSORIES',
  COMPUTER_SUPPLIES: 'COMPUTER_SUPPLIES',
  PET_FOOD: 'PET_FOOD',
  PET_ACCESSORIES: 'PET_ACCESSORIES',
  PET_MEDICATIONS: 'PET_MEDICATIONS',
  BOOKS: 'BOOKS',
  MAGAZINES: 'MAGAZINES',
  MOVIES_MUSIC: 'MOVIES_MUSIC',
  AUTO_PARTS: 'AUTO_PARTS',
  CAR_ACCESSORIES: 'CAR_ACCESSORIES',
  OFFICE_SUPPLIES: 'OFFICE_SUPPLIES',
  SPORTING_GOODS: 'SPORTING_GOODS',
  CLOTHING_ACCESSORIES: 'CLOTHING_ACCESSORIES',
  OTHER: 'OTHER'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  PREPARING: 'PREPARING',
  OUT_FOR_DELIVERY: 'OUT_FOR_DELIVERY',
  DELIVERED: 'DELIVERED',
  CANCELLED: 'CANCELLED',
  FAILED: 'FAILED'
};

exports.DeliveryType = exports.$Enums.DeliveryType = {
  DELIVERY: 'DELIVERY',
  PICKUP: 'PICKUP',
  BOTH: 'BOTH'
};

exports.Prisma.ModelName = {
  User: 'User',
  Address: 'Address',
  UserPreferences: 'UserPreferences',
  Store: 'Store',
  ScrapingInfo: 'ScrapingInfo',
  Product: 'Product',
  Order: 'Order',
  OrderItem: 'OrderItem',
  SearchLog: 'SearchLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
